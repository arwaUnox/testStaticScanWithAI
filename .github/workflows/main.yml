name: AI Static Code Analysis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  ai-code-analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Install Codex CLI
        run: npm install -g @openai/codex

      - name: Write Codex config
        run: |
          mkdir -p ~/.codex
          echo "${{ secrets.CODEX_PROFILE }}" > ~/.codex/config.toml
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      # ðŸ”¹ STEP 1: Run your Fireworks DeepSeek scan
      - name: Run Fireworks vulnerability scan
        run: |
          node scripts/static-analysis.js
        env:
          FIREWORKS_API_KEY: ${{ secrets.FIREWORKS_API_KEY }}

      - name: Check API key exists
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "OPENAI_API_KEY is missing"
            exit 1
          else
            echo "OPENAI_API_KEY is set"
          fi
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      # ðŸ”¹ STEP 2: Run classification script (codex / DeepSeek)
      - name: Run vulnerability classification
        run: |
          node scripts/verify-codex.js
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      # ðŸ”¹ STEP 3: Convert classification results to SARIF format
      # (so GitHub Code Scanning can display them)
      - name: Convert classified findings to SARIF
        run: |
          node scripts/convert-to-sarif.js

      # ðŸ”¹ STEP 4: Upload SARIF results to GitHub Code Scanning
      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: classified-findings.sarif
